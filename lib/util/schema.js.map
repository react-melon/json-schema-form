{"version":3,"sources":["util/schema.js"],"names":["resolveDefaults","fill","schema","type","Object","keys","properties","reduce","value","fieldName","items","Array","isArray","map","obj","def","required","defaultValue","indexOf","item","index"],"mappings":";;;;;;;;;;;;;;;;YAKgBA,e,GAAAA,e;YAyBAC,I,GAAAA,I;;;;;;;;;;;;;;;;;;;;;;AA9BhB;;;;;AAKO,aAASD,eAAT,CAAyBE,MAAzB,EAAiC;;AAEpC,gBAAQA,OAAOC,IAAf;AACI,iBAAK,QAAL;AACI,uBAAOC,OACFC,IADE,CACGH,OAAOI,UADV,EAEFC,MAFE,CAEK,UAAUC,KAAV,EAAiBC,SAAjB,EAA4B;AAChCD,0BAAMC,SAAN,IAAmBT,gBAAgBE,OAAOI,UAAP,CAAkBG,SAAlB,CAAhB,CAAnB;AACA,2BAAOD,KAAP;AACH,iBALE,EAKA,EALA,CAAP;AAMJ,iBAAK,OAAL;AACI,oBAAME,QAAQR,OAAOQ,KAArB;AACA,uBAAOC,MAAMC,OAAN,CAAcF,KAAd,IACDA,MAAMG,GAAN,CAAUb,eAAV,CADC,GAED,CAACA,gBAAgBU,KAAhB,CAAD,CAFN;AAGJ,iBAAK,QAAL;AACI,uBAAOR,qBAAkB,EAAzB;AACJ,iBAAK,QAAL;AACI,uBAAOA,qBAAkB,CAAzB;AACJ,iBAAK,SAAL;AACI,uBAAOA,qBAAkB,KAAzB;AAlBR;AAqBH;;AAEM,aAASD,IAAT,CAAca,GAAd,EAAmBZ,MAAnB,EAA2B;AAAA,YAGjBa,GAHiB,GAK1Bb,MAL0B;AAAA,YAI1BC,IAJ0B,GAK1BD,MAL0B,CAI1BC,IAJ0B;;;AAO9B,gBAAQA,IAAR;;AAEI,iBAAK,QAAL;;AAEI;AACA,oBAAIW,OAAO,IAAP,IAAe,QAAOA,GAAP,yCAAOA,GAAP,OAAe,QAAlC,EAA4C;;AAExC;AACAA,0BAAMC,OAAO,EAAb;AAEH;;AARL,yCAU6Cb,MAV7C,CAUWI,UAVX;AAAA,oBAUWA,UAVX,sCAUwB,EAVxB;AAAA,uCAU6CJ,MAV7C,CAU4Bc,QAV5B;AAAA,oBAU4BA,QAV5B,oCAUuC,EAVvC;;;AAYI,uBAAOZ,OACFC,IADE,CACGC,UADH,EAEFC,MAFE,CAGC,UAACC,KAAD,EAAQC,SAAR,EAAsB;;AAElB,wBAAIQ,eAAehB,KACfO,MAAMC,SAAN,CADe,EAEfP,OAAOI,UAAP,CAAkBG,SAAlB,CAFe,CAAnB;;AAKA;AACI;AACAQ,oCAAgB;AAChB;AADA,uBAEGD,SAASE,OAAT,CAAiBT,SAAjB,KAA+B,CAJtC,EAKE;AACED,8BAAMC,SAAN,IAAmBQ,YAAnB;AACH;;AAED,2BAAOT,KAAP;AACH,iBApBF,eAqBKM,GArBL,EAAP;;AAyBJ,iBAAK,OAAL;;AAEI,oBAAI,CAACH,MAAMC,OAAN,CAAcE,GAAd,CAAL,EAAyB;AACrBA,0BAAMC,OAAO,EAAb;AACH;;AAED,oBAAML,QAAQR,OAAOQ,KAArB;;AAEA;AACA,oBAAIC,MAAMC,OAAN,CAAcF,KAAd,CAAJ,EAA0B;AACtB,2BAAOA,MAAMG,GAAN,CAAU,UAACM,IAAD,EAAOC,KAAP;AAAA,+BAAiBnB,KAAKa,IAAIM,KAAJ,CAAL,EAAiBD,IAAjB,CAAjB;AAAA,qBAAV,CAAP;AACH;;AAED;AACA,uBAAOL,IAAID,GAAJ,CAAQ;AAAA,2BAAQZ,KAAKkB,IAAL,EAAWT,KAAX,CAAR;AAAA,iBAAR,CAAP;;AAEJ,iBAAK,QAAL;AACA,iBAAK,QAAL;AACA,iBAAK,SAAL;AACI,uBAAO,QAAOI,GAAP,yCAAOA,GAAP,OAAeX,IAAf,GAAsBW,GAAtB,GAA4BC,GAAnC;;AA1DR;AA8DH","file":"schema.js","sourcesContent":["/**\n * @file shcema\n * @author leon <ludafa@outlook.com>\n */\n\nexport function resolveDefaults(schema) {\n\n    switch (schema.type) {\n        case 'object':\n            return Object\n                .keys(schema.properties)\n                .reduce(function (value, fieldName) {\n                    value[fieldName] = resolveDefaults(schema.properties[fieldName]);\n                    return value;\n                }, {});\n        case 'array':\n            const items = schema.items;\n            return Array.isArray(items)\n                ? items.map(resolveDefaults)\n                : [resolveDefaults(items)];\n        case 'string':\n            return schema.default || '';\n        case 'number':\n            return schema.default || 0;\n        case 'boolean':\n            return schema.default || false;\n    }\n\n}\n\nexport function fill(obj, schema) {\n\n    const {\n        default: def,\n        type\n    } = schema;\n\n    switch (type) {\n\n        case 'object':\n\n            // 如果不是一个对象，那么生成它\n            if (obj == null || typeof obj !== 'object') {\n\n                // 优先使用 schema.default，没有的话提供默认 {}\n                obj = def || {};\n\n            }\n\n            const {properties = {}, required = []} = schema;\n\n            return Object\n                .keys(properties)\n                .reduce(\n                    (value, fieldName) => {\n\n                        let defaultValue = fill(\n                            value[fieldName],\n                            schema.properties[fieldName]\n                        );\n\n                        if (\n                            // default 没有 null 这个东西\n                            defaultValue != null\n                            // 是必填选\n                            || required.indexOf(fieldName) >= 0\n                        ) {\n                            value[fieldName] = defaultValue;\n                        }\n\n                        return value;\n                    },\n                    {...obj}\n                );\n\n\n        case 'array':\n\n            if (!Array.isArray(obj)) {\n                obj = def || [];\n            }\n\n            const items = schema.items;\n\n            // tulpe\n            if (Array.isArray(items)) {\n                return items.map((item, index) => fill(obj[index], item));\n            }\n\n            // variable array\n            return obj.map(item => fill(item, items));\n\n        case 'string':\n        case 'number':\n        case 'boolean':\n            return typeof obj === type ? obj : def;\n\n    }\n\n}\n"]}