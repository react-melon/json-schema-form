{"version":3,"sources":["component/controls/string/Enum.js"],"names":["EnumTextField","shouldComponentUpdate","nextProps","props","render","schema","value","name","actions","meta","disabled","readOnly","title","description","enumNames","error","touched","valid","message","className","defaultValue","change","e","validate","map","item","index","propTypes","object","isRequired","string","type"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;QAYqBA,a;;;;;;;;;gCAEjBC,qB,kCAAsBC,S,EAAW;AAC7B,mBAAO,CAAC,+BAAaA,SAAb,EAAwB,KAAKC,KAA7B,CAAR;AACH,S;;gCAEDC,M,qBAAS;AAAA,yBAUD,KAAKD,KAVJ;AAAA,gBAGDE,MAHC,UAGDA,MAHC;AAAA,gBAIDC,KAJC,UAIDA,KAJC;AAAA,gBAKDC,IALC,UAKDA,IALC;AAAA,gBAMDC,OANC,UAMDA,OANC;AAAA,gBAODC,IAPC,UAODA,IAPC;AAAA,gBAQDC,QARC,UAQDA,QARC;AAAA,gBASDC,QATC,UASDA,QATC;AAAA,gBAaDC,KAbC,GAgBDP,MAhBC,CAaDO,KAbC;AAAA,gBAcDC,WAdC,GAgBDR,MAhBC,CAcDQ,WAdC;AAAA,gBAeDC,SAfC,GAgBDT,MAhBC,CAeDS,SAfC;AAAA,gBAmBDC,KAnBC,GAqBDN,IArBC,CAmBDM,KAnBC;AAAA,gBAoBDC,OApBC,GAqBDP,IArBC,CAoBDO,OApBC;;;AAuBL,gBAAMC,QAAQD,WAAWD,KAAX,IAAoBA,MAAMG,OAAxC;;AAEA,gBAAMC,YAAY,uCACd,iBADc,EAEd,KAAKhB,KAFS,CAAlB;;AAKA,mBACI;AAAA;AAAA,kBAAK,WAAWgB,SAAhB;AAEQP,wBACM;AAAA;AAAA;AACE,mCAAU,uBADZ;AAEGA;AAFH,iBADN,GAKM,IAPd;AAUQC,8BACM;AAAA;AAAA;AACE,mCAAU,4BADZ;AAEGA;AAFH,iBADN,GAKM,IAfd;AAiBI;AAAA;AAAA;AACI,kCAAUH,QADd;AAEI,kCAAUC,QAFd;AAGI,8BAAK,KAHT;AAII,kCAAU,CAAC,OAAD,CAJd;AAKI,8BAAMJ,IALV;AAMI,gCAAQ,EAACU,YAAD,EANZ;AAOI,+BAAOX,SAAS,IAAT,GAAgBD,OAAOe,YAAvB,GAAsCd,KAPjD;AAQI,kCAAU,qBAAK;AACXE,oCAAQa,MAAR,CAAed,IAAf,EAAqBe,EAAEhB,KAAvB;AACAE,oCAAQe,QAAR,CAAiBhB,IAAjB;AACH,yBAXL;AAYKF,mCAAYmB,GAAZ,CAAgB,UAACC,IAAD,EAAOC,KAAP;AAAA,+BACb;AAAA;AAAA,8BAAQ,KAAKD,IAAb,EAAmB,OAAOA,IAA1B;AACKX,yCAAaA,UAAUY,KAAV,CAAb,IAAiCD;AADtC,yBADa;AAAA,qBAAhB;AAZL,iBAjBJ;AAmCI,6EAAmBhB,IAAnB;AAnCJ,aADJ;AAwCH,S;;;;;yBA5EgBT,a;;;AAgFrBA,kBAAc2B,SAAd,GAA0B;AACtBtB,gBAAQ,iBAAUuB,MAAV,CAAiBC,UADH;AAEtBvB,eAAO,iBAAUwB;AAFK,KAA1B;;AAKA,kCAAgB,UAAUzB,MAAV,EAAkB;;AAE9B,YACIA,OAAO0B,IAAP,KAAgB,QAAhB,IACG1B,cAFP,EAGE;AACE,mBAAOL,aAAP;AACH;AAEJ,KATD","file":"Enum.js","sourcesContent":["/**\n * @file EnumTextField\n * @author leon <ludafa@outlook.com>\n */\n\nimport React, {Component, PropTypes} from 'react';\nimport Select from 'melon/Select';\nimport shallowEqual from 'melon-core/util/shallowEqual';\nimport ValidityLabel from '../../ValidityLabel';\nimport {registerControl} from '../../../factory';\nimport createStateClassName from '../../../util/createStateClassName';\n\nexport default class EnumTextField extends Component {\n\n    shouldComponentUpdate(nextProps) {\n        return !shallowEqual(nextProps, this.props);\n    }\n\n    render() {\n\n        const {\n            schema,\n            value,\n            name,\n            actions,\n            meta,\n            disabled,\n            readOnly\n        } = this.props;\n\n        const {\n            title,\n            description,\n            enumNames\n        } = schema;\n\n        const {\n            error,\n            touched\n        } = meta;\n\n        const valid = touched && error && error.message;\n\n        const className = createStateClassName(\n            'ui-control-enum',\n            this.props\n        );\n\n        return (\n            <div className={className}>\n                {\n                    title\n                        ? <header\n                            className=\"ui-control-enum-title\">\n                            {title}\n                        </header>\n                        : null\n                }\n                {\n                    description\n                        ? <p\n                            className=\"ui-control-enum-decription\">\n                            {description}\n                        </p>\n                        : null\n                }\n                <Select\n                    disabled={disabled}\n                    readOnly={readOnly}\n                    size=\"xxs\"\n                    variants={['fluid']}\n                    name={name}\n                    states={{valid}}\n                    value={value == null ? schema.defaultValue : value}\n                    onChange={e => {\n                        actions.change(name, e.value);\n                        actions.validate(name);\n                    }}>\n                    {schema.enum.map((item, index) => (\n                        <option key={item} value={item}>\n                            {enumNames && enumNames[index] || item}\n                        </option>\n                    ))}\n                </Select>\n                <ValidityLabel {...meta} />\n            </div>\n        );\n\n    }\n\n}\n\nEnumTextField.propTypes = {\n    schema: PropTypes.object.isRequired,\n    value: PropTypes.string\n};\n\nregisterControl(function (schema) {\n\n    if (\n        schema.type === 'string'\n        && schema.enum\n    ) {\n        return EnumTextField;\n    }\n\n});\n"]}