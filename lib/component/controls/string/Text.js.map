{"version":3,"sources":["component/controls/string/Text.js"],"names":["TextControl","args","onFocus","bind","onBlur","onChange","shouldComponentUpdate","nextProps","props","e","name","actions","focus","blur","change","target","value","render","schema","meta","disabled","readOnly","title","description","placeholder","touched","error","invalid","message","className","type"],"mappings":"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","file":"Text.js","sourcesContent":["/**\n * @file Text\n * @author leon <ludafa@outlook.com>\n */\n\nimport React, {Component} from 'react';\nimport {registerControl} from '../../../factory';\nimport shallowEqual from 'melon-core/util/shallowEqual';\nimport TextBox from 'melon/TextBox';\nimport ValidityLabel from '../../ValidityLabel';\nimport createStateClassName from '../../../util/createStateClassName';\n\nexport default class TextControl extends Component {\n\n    constructor(...args) {\n        super(...args);\n        this.onFocus = this.onFocus.bind(this);\n        this.onBlur = this.onBlur.bind(this);\n        this.onChange = this.onChange.bind(this);\n    }\n\n    shouldComponentUpdate(nextProps) {\n        return !shallowEqual(nextProps, this.props);\n    }\n\n    onFocus(e) {\n\n        const {\n            name,\n            actions\n        } = this.props;\n\n        actions.focus(name, e);\n\n    }\n\n    onBlur(e) {\n        const {name, actions} = this.props;\n        actions.blur(name);\n    }\n\n    onChange(e) {\n\n        const {\n            actions,\n            name\n        } = this.props;\n\n        actions.change(name, e.target.value);\n\n    }\n\n    render() {\n\n        const {\n            schema,\n            value,\n            name,\n            meta,\n            disabled,\n            readOnly\n        } = this.props;\n\n\n        const {\n            title,\n            description,\n            placeholder\n        } = schema;\n\n        const {\n            touched,\n            error,\n            focus\n        } = meta;\n\n        const invalid = !focus && touched && error && error.message;\n\n        const className = createStateClassName(\n            'ui-control-text',\n            this.props\n        );\n\n        return (\n            <div className={className}>\n                {\n                    title\n                        ? (\n                            <header className=\"ui-control-text-title\">\n                                {title}\n                            </header>\n                        )\n                        : null\n                }\n                {\n                    description\n                        ? (\n                            <p className=\"ui-control-text-description\">\n                                {description}\n                            </p>\n                        )\n                        : null\n                }\n                <TextBox\n                    disabled={disabled}\n                    readOnly={readOnly}\n                    variants={['fluid']}\n                    states={{invalid}}\n                    size=\"xs\"\n                    placeholder={placeholder}\n                    name={name}\n                    value={value}\n                    defaultValue={schema.default}\n                    onFocus={this.onFocus}\n                    onChange={this.onChange}\n                    onBlur={this.onBlur} />\n                <ValidityLabel {...meta} />\n            </div>\n        );\n\n    }\n\n}\n\nregisterControl(function (schema) {\n\n    if (schema.type === 'string') {\n        return TextControl;\n    }\n\n});\n"]}