{"version":3,"sources":["component/controls/string/Range.js"],"names":["Range","shouldComponentUpdate","nextProps","props","render","schema","value","name","actions","meta","formatMaximum","formatMinimum","title","description","error","touched","isNaN","invalid","message","className","change","e","validate","propTypes","object","isRequired","type","format"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;QAYqBA,K;;;;;;;;;wBAEjBC,qB,kCAAsBC,S,EAAW;AAC7B,mBAAO,CAAC,+BAAaA,SAAb,EAAwB,KAAKC,KAA7B,CAAR;AACH,S;;wBAEDC,M,qBAAS;AAAA,yBAQD,KAAKD,KARJ;AAAA,gBAGDE,MAHC,UAGDA,MAHC;AAAA,gBAIDC,KAJC,UAIDA,KAJC;AAAA,gBAKDC,IALC,UAKDA,IALC;AAAA,gBAMDC,OANC,UAMDA,OANC;AAAA,gBAODC,IAPC,UAODA,IAPC;AAAA,gBAWDC,aAXC,GAeDL,MAfC,CAWDK,aAXC;AAAA,wCAeDL,MAfC,CAYDM,aAZC;AAAA,gBAYDA,aAZC,yCAYe,CAZf;AAAA,gBAaDC,KAbC,GAeDP,MAfC,CAaDO,KAbC;AAAA,gBAcDC,WAdC,GAeDR,MAfC,CAcDQ,WAdC;AAAA,gBAkBDC,KAlBC,GAoBDL,IApBC,CAkBDK,KAlBC;AAAA,gBAmBDC,OAnBC,GAoBDN,IApBC,CAmBDM,OAnBC;;;AAsBLT,oBAAQU,MAAM,CAACV,KAAP,IAAgBK,aAAhB,GAAgCL,KAAxC;;AAEA,gBAAIW,UAAUF,WAAWD,KAAX,IAAoBA,MAAMI,OAAxC;;AAEA,gBAAIC,YAAY,uCACZ,kBADY,EAEZ,KAAKhB,KAFO,CAAhB;;AAKA,mBACI;AAAA;AAAA,kBAAK,WAAWgB,SAAhB;AAEQP,wBACM;AAAA;AAAA;AACE,mCAAU,wBADZ;AAEGA;AAFH,iBADN,GAKM,IAPd;AAUQC,8BACM;AAAA;AAAA;AACE,mCAAU,6BADZ;AAEGA;AAFH,iBADN,GAKM,IAfd;AAiBI;AACI,0BAAK,KADT;AAEI,8BAAU,CAAC,OAAD,CAFd;AAGI,0BAAMN,IAHV;AAII,2BAAO,CAACD,KAJZ;AAKI,6BAAS,CAACI,aALd;AAMI,6BAAS,CAACC,aANd;AAOI,4BAAQ,EAACM,gBAAD,EAPZ;AAQI,8BAAU,qBAAK;AACXT,gCAAQY,MAAR,CAAeb,IAAf,EAAqBc,EAAEf,KAAF,GAAU,EAA/B;AACAE,gCAAQc,QAAR,CAAiBf,IAAjB;AACH,qBAXL,GAjBJ;AA6BI,6EAAmBE,IAAnB;AA7BJ,aADJ;AAkCH,S;;;;;yBAvEgBT,K;;;AA2ErBA,UAAMuB,SAAN,GAAkB;AACdlB,gBAAQ,iBAAUmB,MAAV,CAAiBC;AADX,KAAlB;;AAIA,kCAAgB,UAAUpB,MAAV,EAAkB;AAAA,YAG1BqB,IAH0B,GAO1BrB,MAP0B,CAG1BqB,IAH0B;AAAA,YAI1BC,MAJ0B,GAO1BtB,MAP0B,CAI1BsB,MAJ0B;AAAA,YAK1BjB,aAL0B,GAO1BL,MAP0B,CAK1BK,aAL0B;AAAA,YAM1BC,aAN0B,GAO1BN,MAP0B,CAM1BM,aAN0B;;;AAS9B,YACIe,SAAS,QAAT,IACGC,WAAW,SADd,IAEGjB,iBAAiB,IAFpB,IAGGC,iBAAiB,IAJxB,EAKE;AACE,mBAAOX,KAAP;AACH;AAEJ,KAlBD","file":"Range.js","sourcesContent":["/**\n * @file Range\n * @author leon <ludafa@outlook.com>\n */\n\nimport React, {PropTypes, Component} from 'react';\nimport Slider from 'melon/Slider';\nimport {registerControl} from '../../../factory';\nimport shallowEqual from 'melon-core/util/shallowEqual';\nimport ValidityLabel from '../../ValidityLabel';\nimport createStateClassName from '../../../util/createStateClassName';\n\nexport default class Range extends Component {\n\n    shouldComponentUpdate(nextProps) {\n        return !shallowEqual(nextProps, this.props);\n    }\n\n    render() {\n\n        let {\n            schema,\n            value,\n            name,\n            actions,\n            meta\n        } = this.props;\n\n        let {\n            formatMaximum,\n            formatMinimum = 0,\n            title,\n            description\n        } = schema;\n\n        let {\n            error,\n            touched\n        } = meta;\n\n        value = isNaN(+value) ? formatMinimum : value;\n\n        let invalid = touched && error && error.message;\n\n        let className = createStateClassName(\n            'ui-control-range',\n            this.props\n        );\n\n        return (\n            <div className={className}>\n                {\n                    title\n                        ? <header\n                            className=\"ui-control-range-title\">\n                            {title}\n                        </header>\n                        : null\n                }\n                {\n                    description\n                        ? <p\n                            className=\"ui-control-range-decription\">\n                            {description}\n                        </p>\n                        : null\n                }\n                <Slider\n                    size=\"xxs\"\n                    variants={['fluid']}\n                    name={name}\n                    value={+value}\n                    maximum={+formatMaximum}\n                    minimum={+formatMinimum}\n                    states={{invalid}}\n                    onChange={e => {\n                        actions.change(name, e.value + '');\n                        actions.validate(name);\n                    }} />\n                <ValidityLabel {...meta} />\n            </div>\n        );\n\n    }\n\n}\n\nRange.propTypes = {\n    schema: PropTypes.object.isRequired\n};\n\nregisterControl(function (schema) {\n\n    const {\n        type,\n        format,\n        formatMaximum,\n        formatMinimum\n    } = schema;\n\n    if (\n        type === 'string'\n        && format === 'numeric'\n        && formatMaximum != null\n        && formatMinimum != null\n    ) {\n        return Range;\n    }\n\n});\n"]}