{"version":3,"sources":["component/controls/array/VariableArray.js"],"names":["VariableArrayItem","args","onRemove","bind","onUpward","onDownward","shouldComponentUpdate","nextProps","props","e","stopPropagation","index","render","schema","uiSchema","name","removable","downable","disabled","readOnly","upButton","downButton","deleteButton","title","propTypes","object","number","bool","upable","func","VariableArray","onFieldUpward","onFieldDownward","onFieldRemove","onFieldAdd","actions","arrayPush","items","validate","arraySwap","arraySplice","value","meta","minItems","maxItems","Number","MAX_VALUE","description","Array","isArray","addButton","length","fields","map","record","arr","key","$items","className","displayName","string","isRequired","array","type"],"mappings":"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","file":"VariableArray.js","sourcesContent":["/**\n * @file Variable Array\n * @author leon <ludafa@outlook.com>\n */\n\nimport React, {PropTypes, Component} from 'react';\nimport Button from 'melon/Button';\nimport Icon from 'melon/Icon';\nimport shallowEqual from 'melon-core/util/shallowEqual';\nimport Field from '../../Field';\nimport Control from '../Control';\nimport {registerControl} from '../../../factory';\nimport {format} from '../../../util/field';\nimport ValidityLabel from '../../ValidityLabel';\nimport {fill} from '../../../util/schema';\nimport createStateClassName from '../../../util/createStateClassName';\n\nexport class VariableArrayItem extends Component {\n\n    constructor(...args) {\n        super(...args);\n        this.onRemove = this.onRemove.bind(this);\n        this.onUpward = this.onUpward.bind(this);\n        this.onDownward = this.onDownward.bind(this);\n    }\n\n    shouldComponentUpdate(nextProps) {\n        return !shallowEqual(nextProps, this.props);\n    }\n\n    onUpward(e) {\n\n        e.stopPropagation();\n\n        const {\n            index,\n            onUpward\n        } = this.props;\n\n        onUpward(index);\n\n    }\n\n    onDownward(e) {\n\n        e.stopPropagation();\n\n        const {\n            index,\n            onDownward\n        } = this.props;\n\n        onDownward(index);\n\n    }\n\n    onRemove() {\n\n        const {\n            index,\n            onRemove\n        } = this.props;\n\n        onRemove(index);\n\n    }\n\n    render() {\n\n        const {\n            schema,\n            uiSchema,\n            name,\n            removable,\n            downable,\n            index,\n            disabled,\n            readOnly\n        } = this.props;\n\n        const upButton = index\n            ? (\n                <Button\n                    type=\"button\"\n                    size=\"xxs\"\n                    variants={['info', 'icon']}\n                    onClick={this.onUpward}>\n                    <Icon icon=\"arrow-upward\" />\n                </Button>\n            )\n            : null;\n\n        const downButton = downable\n            ? (\n                <Button\n                    type=\"button\"\n                    size=\"xxs\"\n                    variants={['info', 'icon']}\n                    onClick={this.onDownward}>\n                    <Icon icon=\"arrow-downward\" />\n                </Button>\n            )\n            : null;\n\n        const deleteButton = removable\n            ? (\n                <Button\n                    type=\"button\"\n                    size=\"xxs\"\n                    variants={['danger', 'icon']}\n                    onClick={this.onRemove}>\n                    <Icon icon=\"delete\" />\n                </Button>\n            )\n            : null;\n\n        const title = (\n            <header className=\"ui-control-variable-array-item-title\">\n                <label>{index + 1}.</label>\n                {upButton}\n                {downButton}\n                {deleteButton}\n            </header>\n        );\n\n        return (\n            <div className=\"ui-control-variable-array-item\">\n                {title}\n                <div className=\"ui-control-variable-array-item-content\">\n                    <Field\n                        disabled={disabled}\n                        readOnly={readOnly}\n                        name={name}\n                        schema={schema}\n                        uiSchema={uiSchema}\n                        control={Control}\n                        format={format} />\n                </div>\n            </div>\n        );\n    }\n\n}\n\nVariableArrayItem.propTypes = {\n    schema: PropTypes.object,\n    index: PropTypes.number,\n    removable: PropTypes.bool,\n    downable: PropTypes.bool,\n    upable: PropTypes.bool,\n    onUpward: PropTypes.func,\n    onDownward: PropTypes.func,\n    onRemove: PropTypes.func\n};\n\nexport default class VariableArray extends Component {\n\n    constructor(...args) {\n        super(...args);\n        this.onFieldUpward = this.onFieldUpward.bind(this);\n        this.onFieldDownward = this.onFieldDownward.bind(this);\n        this.onFieldRemove = this.onFieldRemove.bind(this);\n        this.onFieldAdd = this.onFieldAdd.bind(this);\n    }\n\n    onFieldAdd() {\n\n        const {\n            actions,\n            name,\n            schema\n        } = this.props;\n\n        actions.arrayPush(name, fill(void 0, schema.items));\n        actions.validate(name);\n\n    }\n\n    onFieldUpward(index) {\n\n        const {\n            actions,\n            name\n        } = this.props;\n\n        actions.arraySwap(name, index, index - 1);\n        actions.validate(name);\n\n    }\n\n    onFieldDownward(index) {\n\n        const {\n            actions,\n            name\n        } = this.props;\n\n        actions.arraySwap(name, index, index + 1);\n        actions.validate(name);\n\n    }\n\n    onFieldRemove(index) {\n\n        const {\n            actions,\n            name\n        } = this.props;\n\n        actions.arraySplice(name, index, 1);\n        actions.validate(name);\n\n    }\n\n    render() {\n\n        let {\n            name,\n            schema,\n            value,\n            uiSchema,\n            meta,\n            disabled,\n            readOnly\n        } = this.props;\n\n        const {\n            items,\n            minItems = 1,\n            maxItems = Number.MAX_VALUE,\n            title,\n            description\n        } = schema;\n\n        if (!Array.isArray(value)) {\n            value = [];\n        }\n\n        const addButton = !readOnly && maxItems > value.length\n            ? (\n                <Button\n                    disabled={disabled}\n                    type=\"button\"\n                    size=\"xxs\"\n                    variants={['icon', 'info']}\n                    onClick={this.onFieldAdd}>\n                    <Icon icon=\"add\" />\n                </Button>\n            )\n            : null;\n\n        const fields = value.length\n            ? value.map((record, index, arr) => {\n                const key = `${name}[${index}]`;\n                return (\n                    <VariableArrayItem\n                        key={key}\n                        name={key}\n                        schema={items}\n                        uiSchema={uiSchema && uiSchema.$items}\n                        index={index}\n                        disabled={disabled}\n                        readOnly={readOnly}\n                        removable={!disabled && !readOnly && minItems < arr.length}\n                        downable={!disabled && !readOnly && index < arr.length - 1}\n                        upable={!disabled && !readOnly && index > 1}\n                        onUpward={this.onFieldUpward}\n                        onDownward={this.onFieldDownward}\n                        onRemove={this.onFieldRemove} />\n                );\n            })\n            : (\n                <p className=\"ui-control-variable-array-empty-list\">\n                    <Button\n                        disabled={disabled || readOnly}\n                        type=\"button\"\n                        size=\"xs\"\n                        variants={['info']}\n                        onClick={this.onFieldAdd}>暂无条目，点击添加</Button>\n                </p>\n            );\n\n        const className = createStateClassName(\n            'ui-control-variable-array',\n            this.props\n        );\n\n        return (\n            <div className={className}>\n                <header className=\"ui-control-variable-array-title\">\n                    {title}\n                    {addButton}\n                </header>\n                {\n                    description\n                        ? (\n                            <p className=\"ui-control-variable-array-description\">\n                                {description}\n                            </p>\n                        )\n                        : null\n                }\n                <ValidityLabel {...meta} />\n                <ul className=\"ui-control-variable-array-list\">\n                    {fields}\n                </ul>\n            </div>\n        );\n\n    }\n\n}\n\nVariableArray.displayName = 'VariableArray';\n\nVariableArray.propTypes = {\n    name: PropTypes.string.isRequired,\n    schema: PropTypes.object.isRequired,\n    uiSchema: PropTypes.object,\n    actions: PropTypes.object.isRequired,\n    value: PropTypes.array\n};\n\nregisterControl(function (schema) {\n\n    const {\n        type,\n        items\n    } = schema;\n\n    if (type === 'array' && !Array.isArray(items)) {\n        return VariableArray;\n    }\n\n});\n"]}